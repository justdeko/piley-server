openapi: "3.0.3"
info:
  title: "piley_server API"
  description: "piley_server API"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
paths:
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /backup/{email}:
    delete:
      description: ""
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
    get:
      description: ""
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Backup not found"
    post:
      description: ""
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Upload is not a file"
  /users:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "409":
          description: "Conflict"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User already exists"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
    put:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User doesn't exist"
  /users/{email}:
    delete:
      description: ""
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
    get:
      description: ""
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
components:
  schemas:
    User:
      type: "object"
      properties:
        email:
          type: "string"
        name:
          type: "string"
        password:
          type: "string"
    UserUpdate:
      type: "object"
      properties:
        oldEmail:
          type: "string"
        newEmail:
          type: "string"
        name:
          type: "string"
        oldPassword:
          type: "string"
        newPassword:
          type: "string"